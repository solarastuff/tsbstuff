-- a script dedicated so tsb (mid)

local tpWalking = false
local tpWalkSpeed = 16
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K" -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = "config", -- Create a custom folder for your hub/game
      FileName = "tsbstuff"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "tsbstuff",
      Subtitle = "Key System",
      Note = "join the discord for key", -- Use this to tell the user how to get a key
      FileName = "tsbstuffKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"pizza"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})


local plrMods = Window:CreateTab("Visual & Plysics", 101213776917004) -- Title, Image

local PhysicsSection = plrMods:CreateSection("Physics")


local speedToggle = plrMods:CreateToggle({
   Name = "Mod Speed",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
tpWalking = Value
   end,
})

local RunService = game:GetService("RunService")
local speedSlider = plrMods:CreateSlider({
   Name = "Speed Amount",
   Range = {0, 100},
   Increment = 2,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)

   tpWalkSpeed = Value

        -- Stop existing loop if already running
        if not tpWalking then return end
        
        -- Run movement loop in a separate thread
        task.spawn(function()
            local hb = RunService.Heartbeat
            local char = game.Players.LocalPlayer.Character
            local hum = char and char:FindFirstChildWhichIsA("Humanoid")
            
            while tpWalking and char and hum and hum.Parent do
                local delta = hb:Wait()
                if hum.MoveDirection.Magnitude > 0 then
                    char:TranslateBy(hum.MoveDirection * delta * tpWalkSpeed)
                end
end
end)


   end,
})



